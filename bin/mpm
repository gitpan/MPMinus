#!/usr/bin/perl -w
# $Id: mpm 195 2013-07-19 06:56:48Z minus $
use strict;

=encoding windows-1251

=head1 NAME

mpm - MPMinus helper

=head1 VERSION

Version 1.17

=head1 SYNOPSIS

    mpm [options] [commands [args]] 

    mpm [-cdlt]

    mpm [-h | -v | -m]

    mpm [--help | --version | --man]
    
    mpm [--log] [--debug] [--testmode] [-s sharedir]
        [ test | void | config [option [value]] | create [projectname] | 
          project projectname [operation [arg1]] ]

=head1 OPTIONS

=over 8

=item B<-c CONFFILE, --conffile=CONFFILE, --conf=CONFFILE, --config=CONFFILE>

Полный путь к основному конфигурационному файлу. Конфигурационный файл позволяет
определять основные параметры по умолчанию, которые будет использовать система если
ей не удастся определить дополнительные файлы конфигурации каталога CONFDIR.
По умолчанию используется системный путь /etc/mpminus/mpm.conf

=item B<--confdir=CONFDIR>

Полный путь к каталогу откуда будут браться ДОПОЛНИТЕЛЬНЫЕ конфигурационные файлы, но
никак не основной конфигурационный файл, для которого существует свой путь и имя.
По умолчанию каталогом являтся системный каталог или каталог /etc/mpminus/conf

=item B<--datadir=DATADIR>

Параметр определящий рабочий каталог.
Это место где будут храниться все файлы во время работы скрипта. По умолчанию каталог принимает 
значение mpminus по пути расположения ваших временных файлов системы

=item B<-d, --debug>

Включение системного отладочного режима уровня модуля CTK.
Отладочный режим позволяет видеть процесс работы программы на экране терминала.

=item B<-h, --help>

Отображение краткой справочной информации.

=item B<-l, --log>

Включение режима записи отладочной (debug) информации в систменый лог CTK.

=item B<--logdir=LOGDIR>

Каталог для хранения файлов лога.
По умолчанию для Windows - это временный каталог Perl, для linux/unix - каталог /var/log

=item B<--logfile=LOGFILE>

Полный пусть к файлу mpm.log. Файл лога задается этой опцией и если значение опущено, 
то используется имя файла mpm.log каталога LOGDIR

=item B<-m, --man>

Отображение полной справочной информации.

=item B<-s SHAREDIR, --sharedir=SHAREDIR, --share=SHAREDIR>

Share directory. Skeleton located in SHAREDIR/skel directory

=item B<-t, --testmode>

Включение тестового режима работы программы.

=item B<-v, --ver, --version>

Отображение текущей версии и наименование программы.

=back

=head1 COMMANDS

=over 8

=item B<config>

    mpm config

Конфигурирование программы mpm - выполняется один раз и в дальнейшем по необходимости.
В качетстве аргументов можно задать 2 параметра: опцию для изменения и ее значение. Если значение
не задано то оно будет запрошено из консоли. Это полезно для установки значение в NULL (пусто)

=item B<create>

    mpm create projectname

Создание проекта. В качестве параметра может быть задано имя проекта в Unix формате

=item B<project>

    mpm project projectname

Работа с проектом projectname. Создание и удаление контроллеров, выдача списка действующих контроллеров

=item B<test>

    mpm test

Тестирование всех параметров MPMinus

=item B<void>

    mpm void

Пустой контекст, программа запускается и ничего не делает.

При вызове осуществляется облегченное тестирование, которое полезно использовать для определения 
необходимых CPAN модулей и системных пакетов

=back

=head1 ABSTRACT

mpm - MPMinus helper

=head1 DESCRIPTION

Управление проектами в среде MPMinus

=head1 HISTORY

=over 8

=item B<1.00 / 21.04.2011>

Init version

=item B<1.01 / 21.12.2011>

Исправлены ошибки связанные с чтением конфигурации Apache и конфигурацией продукта mpm

=item B<1.10 / 28.12.2011>

Создан полноценный механизм тестирования

=item B<1.15 / Tue Jun  4 10:44:13 2013 GMT>

Init version as part of MPMinus

=back

See C<CHANGES> file

=head1 DEPENDENCIES

L<CTK>

=head1 TO DO

See C<TODO> file

=head1 BUGS

Coming soon

=head1 SEE ALSO

C<perl>, L<CTK>

=head1 DIAGNOSTICS

The usual warnings if it can't read or write the files involved.

=head1 AUTHOR

Serz Minus (Lepenkov Sergey) L<http://serzik.ru> E<lt>minus@mail333.comE<gt>

=head1 COPYRIGHT

Copyright (C) 1998-2013 D&D Corporation. All Rights Reserved

=head1 LICENSE

This program is distributed under the GNU GPL v3.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

See C<LICENSE> file

=cut

use constant {
    PIDFILE   => 'mpm.pid', # Файл PID по умолчанию
    PREFIX    => 'mpminus', # Префикс самой программы
    SKELDIR   => 'src/skel',# Директория до скелетона проекта (ПЕРЕД ИСПОЛЬЗОВАНИЕМ СЕПАРИРОВАТЬ!!!)
    METAFILE  => 'META.yml',# META-файл

    # Команды и их параметры.
    CMDDEFAULT => 'void',
    CMD => {
        void => {
            pidcheck => 0, # 0 - OFF, 1 - ON
        },
        test => {
            pidcheck => 1, # 0 - OFF, 1 - ON
        },
        config => {
            pidcheck => 1,
            sysconfdir => '',
        },
        create => {
            pidcheck => 1,
        },
        project => {
            pidcheck => 1,
        },
    },

};

use Getopt::Long;
use Pod::Usage;
use FindBin qw($RealBin);

# CTK Packages
use base qw/MPMinus::Helper::Handlers/;
use CTK;
use CTK::FilePid;

# Режимы команд
Getopt::Long::Configure ("bundling");

GetOptions(\%OPT,

    # Параметры справки
    "help|usage|h|?",                       # Помощь по синопсису
    "man|m",                                # Справка
    "version|ver|v",                        # Текущая версия
    
    # Параметры отладки
    "debug|d",                              # Отладка 
    "log|l",                                # Логирование -- в лог, уровень лога см. LOG
   
    # Режим работы
    "testmode|test|t",                      # Тестовый режим работы

    # Параметры программы
    "datadir=s",                            # DATADIR
    "logdir=s",                             # LOGDIR
    "logfile=s",                            # LOGFILE
    "conffile|conf|config|c=s",             # CONFFILE
    "confdir=s",                            # CONFDIR
    
    "sharedir|share|sd|s=s",                # SHAREDIR (For skel dir)
    
) || pod2usage(-exitval => 1, -verbose => 0, -output => \*CTK::CTKCP);
pod2usage(-exitval => 0, -verbose => 0, -output => \*CTK::CTKCP) if $OPT{help};
pod2usage(-exitval => 0, -verbose => 99, -sections => 'NAME|VERSION', -output => \*CTK::CTKCP) if $OPT{version};
pod2usage(-exitval => 0, -verbose => 2, -output => \*CTK::CTKCP) if $OPT{man};

# VARS
my %cmddata;

# Команды
my $command   = @ARGV ? shift @ARGV : CMDDEFAULT; # Команда
my @arguments = @ARGV ? @ARGV : (); # Аргументы команд
my @commands  = keys %{sub{CMD}->()}; # @{sub{COMMANDS}->()}
pod2usage(-exitval => 1, -verbose => 99, -sections => 'SYNOPSIS|OPTIONS|COMMANDS', -output => \*CTK::CTKCP)
    if ( (grep {$_ eq $command} @commands) ? 0 : 1 );

# Основная рабочая папка (DATADIR) на базе TEMP
$DATADIR = $OPT{datadir} || '';
$DATADIR = CTK::catfile(CTK::tmpdir(),PREFIX) unless $DATADIR;

# Директория для логов (LOGDIR) на базе TEMP
$LOGDIR = $OPT{logdir} || CTK::syslogdir();
$LOGDIR = $LOGDIR = CTK::tmpdir() unless -e $LOGDIR;

# Файл основного лога (LOGFILE) на базе LOGDIR
$LOGFILE = $OPT{logfile} || '';
$LOGFILE = CTK::catfile($LOGDIR,"mpm.log") unless $LOGFILE;

# Директория для файлов конфигурации (CONFDIR) на базе /etc и Файл конфигурации (CONFFILE)
my $SYSCONFDIR = CTK::sysconfdir(); # Системная конфигурация
CMD->{config}{sysconfdir} = $SYSCONFDIR;
$CONFDIR = $OPT{confdir} || CTK::catfile($SYSCONFDIR,PREFIX,'conf');
$CONFFILE = $OPT{conffile} || CTK::catfile($SYSCONFDIR,PREFIX,'mpm.conf');

# Preparing directories
CTK::preparedir({
        logdir  => $LOGDIR,
        datadir => $DATADIR,
        confdir => $CONFDIR,
    });

# Проверки
exception( "You must have specify valid temp directory to store temporary files ($DATADIR)" ) unless ($DATADIR && -d $DATADIR);
exception( "You must have specify valid log directory to store log files ($LOGDIR)" ) unless ($LOGDIR && -d $LOGDIR);
    
START:  debug "-"x16, " START ", (testmode() ? 'IN TEST MODE ' : ''), tms," ","-"x16;
#########################
### START
#########################

my $code = __PACKAGE__->can(uc($command));
if ($code && ref($code) eq 'CODE') {
    %cmddata = %{CMD->{$command}};
    $cmddata{arguments} = [@arguments];

    # Определение PID файла и получение состояния
    my $pidfile = new CTK::FilePid({ file => CTK::catfile($DATADIR, $cmddata{pidfile} || PIDFILE) });
    my $pidstat = $pidfile->running || 0;
    
    debug "==== START COMMAND: ".uc($command)." ($$) ====";
    
    if ($cmddata{pidcheck}) {
        exception("PID STATE (".$pidfile->file()."): ALREADY EXISTS (PID: $pidstat)" ) if $pidstat;
        $pidfile->write;
    }

    &{$code}(%cmddata); # Передается в процедуру Хэш данных и параметров
    
    if ($cmddata{pidcheck}) {
        $pidfile->remove;
    }
    
    debug "==== FINISH COMMAND: ".uc($command)." ($$) ====";
} else {
    exception("Sub \"".uc($command)."\" undefined");
}

#########################
### FINISH
#########################
FINISH: debug "-"x16, " FINISH ", (testmode() ? 'IN TEST MODE ' : '') ,tms," ","-"x16;
exit(0);

1;
__END__

NoUsed keys map:

a A b B   C   D e E 
f F g G   H i I j J 
k K   L   M n N o O 
p P q Q r R   S   T 
u U   V w W x X y Y 
z Z

